1
00:00:05,000 --> 00:00:08,600
关于大语言模型的一个令人兴奋的事情，是你可以用它来

2
00:00:08,600 --> 00:00:12,680
构建一个自定义的聊天机器人，只需花费少量的精力

3
00:00:12,680 --> 00:00:17,660
ChatGPT的Web界面能让你通过一个大语言模型

4
00:00:17,660 --> 00:00:20,500
进行对话

5
00:00:20,500 --> 00:00:23,120
但其中一个很酷的事情是你也可以使用

6
00:00:23,120 --> 00:00:25,680
一个大语言模型来建立你的自定义聊天机器人

7
00:00:25,680 --> 00:00:28,920
也许可以扮演一个AI客户服务代理或

8
00:00:28,920 --> 00:00:31,480
餐馆的AI接单员

9
00:00:31,480 --> 00:00:34,400
在这段视频中，你将学习如何做这件事

10
00:00:34,400 --> 00:00:37,080
我将描述以下内容

11
00:00:37,080 --> 00:00:39,960
我将更详细地描述OpenAI的聊天补全格式

12
00:00:39,960 --> 00:00:42,540
然后你将自己建立一个聊天机器人

13
00:00:42,540 --> 00:00:44,400
所以让我们开始吧

14
00:00:44,400 --> 00:00:49,000
首先，我们将像往常一样设置OpenAI Python包

15
00:00:49,000 --> 00:00:53,380
因此，像ChatGPT这样的聊天模型实际上是被训练成以一系列的信息作为输入

16
00:00:53,380 --> 00:00:57,640
并返回模型生成的信息作为输出

17
00:00:57,640 --> 00:00:59,960
因此，尽管聊天格式的设计是为了

18
00:00:59,960 --> 00:01:02,320
使得像这样的多轮对话变得容易

19
00:01:02,320 --> 00:01:06,000
我们在之前的视频中已经看到

20
00:01:06,000 --> 00:01:09,560
它也适用于没有对话的单个任务

21
00:01:09,560 --> 00:01:14,200
所以接下来，我们要定义两个辅助函数

22
00:01:14,200 --> 00:01:17,080
就是我们在所有视频中一直在使用的一个

23
00:01:17,080 --> 00:01:20,360
get_completion函数

24
00:01:20,360 --> 00:01:22,080
但是，如果你看一下它

25
00:01:22,080 --> 00:01:25,040
我们给出了一个提示，但是在这个函数里面

26
00:01:25,040 --> 00:01:29,320
我们实际上在做的是把这个提示放到一个

27
00:01:29,320 --> 00:01:32,160
看起来像某种用户信息

28
00:01:32,160 --> 00:01:37,200
这是因为ChatGPT模型是一个聊天模型

29
00:01:37,200 --> 00:01:40,200
这意味着它被训练成以一系列信息作为输入

30
00:01:40,200 --> 00:01:44,000
然后返回模型生成的信息输出

31
00:01:44,000 --> 00:01:45,880
所以用户信息是一种输入

32
00:01:45,880 --> 00:01:49,320
然后助理的信息是输出

33
00:01:49,320 --> 00:01:51,320
所以在这个视频中

34
00:01:51,320 --> 00:01:53,760
我们将使用一个不同的辅助函数

35
00:01:53,760 --> 00:01:55,640
而不是把

36
00:01:55,640 --> 00:01:58,400
单一提示作为输入并获得单一结果

37
00:01:58,400 --> 00:02:01,680
我们将传入一个信息列表

38
00:02:01,680 --> 00:02:05,400
这些信息可以来自各种不同的角色

39
00:02:05,400 --> 00:02:07,160
所以我将描述这些

40
00:02:07,160 --> 00:02:10,040
这里有一个消息列表的例子

41
00:02:10,040 --> 00:02:12,040
第一条信息是

42
00:02:12,040 --> 00:02:15,200
一个系统消息，它给出了一个总体指令

43
00:02:15,200 --> 00:02:16,360
然后在这个消息之后

44
00:02:16,360 --> 00:02:20,040
我们在用户和助理之间有几轮对话

45
00:02:20,040 --> 00:02:21,920
而且这种对话通常会继续下去

46
00:02:21,920 --> 00:02:24,800
如果你曾经使用过ChatGPT的Web界面

47
00:02:24,800 --> 00:02:27,680
那么你输入的信息就是用户信息

48
00:02:27,680 --> 00:02:30,880
然后ChatGPT的信息是助理的信息

49
00:02:30,880 --> 00:02:33,440
因此，系统信息有助于在某种程度上

50
00:02:33,440 --> 00:02:35,800
设定助理的行为和角色

51
00:02:35,800 --> 00:02:38,920
它就像对话的高级指令一样

52
00:02:38,920 --> 00:02:40,640
所以你可以把它看成是

53
00:02:40,640 --> 00:02:42,440
在助理的耳边说的话，并引导

54
00:02:42,440 --> 00:02:46,320
它的反应，而用户并不知道系统的信息

55
00:02:46,320 --> 00:02:47,960
因此，作为用户

56
00:02:47,960 --> 00:02:49,400
如果你曾经使用过ChatGPT

57
00:02:49,400 --> 00:02:52,640
你可能不知道ChatGPT的系统消息里有什么

58
00:02:52,640 --> 00:02:55,360
系统消息的好处是

59
00:02:55,360 --> 00:02:57,240
它为开发者提供了一种方法来框定会话

60
00:02:57,240 --> 00:02:59,120
而不是让请求本身

61
00:02:59,120 --> 00:03:01,320
成为对话的一部分

62
00:03:01,320 --> 00:03:04,880
这样，你就可以在不让用户察觉的情况下引导助理

63
00:03:04,880 --> 00:03:09,640
并指导其回复

64
00:03:10,280 --> 00:03:15,440
所以现在让我们试着在对话中使用这些信息

65
00:03:16,080 --> 00:03:19,160
所以我们将使用我们的新助理函数

66
00:03:19,160 --> 00:03:21,720
来补全消息内容

67
00:03:22,600 --> 00:03:27,200
而且我们也在使用更高的temperature

68
00:03:27,200 --> 00:03:29,400
所以系统消息说

69
00:03:29,400 --> 00:03:31,440
你是一个说话像莎士比亚的助理

70
00:03:31,440 --> 00:03:33,160
所以这是我们在向助理描述

71
00:03:33,160 --> 00:03:35,960
向助理描述它应该如何表现

72
00:03:35,960 --> 00:03:38,680
然后第一个用户信息是，告诉我一个笑话

73
00:03:38,680 --> 00:03:41,640
接下来是，鸡为什么要过马路？

74
00:03:41,640 --> 00:03:45,520
然后最后的用户信息是，我不知道

75
00:03:45,520 --> 00:03:49,880
所以，如果我们运行这个

76
00:03:50,600 --> 00:03:55,400
响应是"去到另一边"。让我们再试一次

77
00:03:55,720 --> 00:03:57,920
"要到另一边去"

78
00:03:57,920 --> 00:03:59,240
公平的先生或女士

79
00:03:59,240 --> 00:04:02,040
这是一个古老而经典的方法，永远不会失败

80
00:04:02,040 --> 00:04:05,120
所以这就是我们的莎士比亚式响应

81
00:04:05,640 --> 00:04:08,960
让我们再试一次

82
00:04:08,960 --> 00:04:11,520
因为我想让它更清楚，这是助理的信息

83
00:04:11,520 --> 00:04:19,360
所以在这里，让我们去打印整个消息的回应

84
00:04:32,880 --> 00:04:36,240
所以只是为了让这个更清楚

85
00:04:36,240 --> 00:04:41,160
这个响应是一个助理信息

86
00:04:41,160 --> 00:04:45,680
所以角色是助理，然后内容是消息本身

87
00:04:45,680 --> 00:04:48,000
所以这就是在这个辅助函数中发生的事情

88
00:04:48,000 --> 00:04:51,880
我们只是传出了消息的内容

89
00:05:04,960 --> 00:05:07,960
所以现在让我们再做一个例子

90
00:05:07,960 --> 00:05:09,840
这里我们的消息是

91
00:05:09,840 --> 00:05:13,160
系统信息是你是一个友好的聊天机器人

92
00:05:13,160 --> 00:05:14,560
而第一个用户信息是

93
00:05:14,560 --> 00:05:16,120
嗨，我的名字是Isa

94
00:05:16,120 --> 00:05:20,640
我们想获得第一个用户的信息

95
00:05:20,640 --> 00:05:22,080
所以让我们执行这个

96
00:05:22,080 --> 00:05:24,640
第一条助理信息

97
00:05:24,640 --> 00:05:26,880
因此，第一条信息是

98
00:05:26,880 --> 00:05:28,400
你好，Isa，很高兴见到你

99
00:05:28,400 --> 00:05:30,760
我今天有什么可以帮助你的吗？

100
00:05:36,000 --> 00:05:38,760
现在让我们试试另一个例子

101
00:05:39,320 --> 00:05:43,720
所以这里我们的信息是系统信息

102
00:05:43,720 --> 00:05:45,120
你是一个友好的聊天机器人

103
00:05:45,120 --> 00:05:47,080
和第一个用户信息是

104
00:05:47,080 --> 00:05:53,880
是的，你能提醒我我的名字是什么吗？

105
00:05:53,880 --> 00:05:56,400
让我们得到回应

106
00:05:56,400 --> 00:06:01,440
正如你所看到的

107
00:06:01,440 --> 00:06:05,800
该模型实际上并不知道我的名字

108
00:06:05,800 --> 00:06:10,680
因此，与语言模型的每一次对话都是一个独立的互动

109
00:06:10,680 --> 00:06:13,200
这意味着，你必须提供所有相关的信息

110
00:06:13,200 --> 00:06:16,120
供模型在当前对话中使用

111
00:06:16,120 --> 00:06:18,560
如果你想让模型从或中汲取

112
00:06:18,560 --> 00:06:21,240
引述，记住一个对话的早期部分

113
00:06:21,240 --> 00:06:24,640
你必须在模型的输入中提供早期的对话交互内容

114
00:06:24,640 --> 00:06:26,960
我们也把这称为上下文

115
00:06:26,960 --> 00:06:30,240
所以，让我们来试试这个

116
00:06:34,440 --> 00:06:39,000
所以现在我们已经给出了模型需要的上下文

117
00:06:39,000 --> 00:06:41,600
这是我在以前的信息中的名字

118
00:06:41,600 --> 00:06:43,160
我们将问同样的问题

119
00:06:43,160 --> 00:06:45,640
所以我们会问我的名字是什么

120
00:06:45,960 --> 00:06:50,320
模型能够作出反应，因为它有所有的上下文

121
00:06:50,320 --> 00:06:55,520
在我们输入的消息列表中需要它

122
00:06:55,520 --> 00:06:58,760
所以现在你要建立你自己的聊天机器人

123
00:06:58,760 --> 00:07:02,040
这个聊天机器人将被称为orderbot（点餐机器人）

124
00:07:02,040 --> 00:07:05,520
我们将自动收集

125
00:07:05,520 --> 00:07:09,480
我们将自动收集用户的提示和助理的回应，以建立这个订单机器人

126
00:07:09,480 --> 00:07:12,200
它将在一家披萨店接受订单

127
00:07:12,200 --> 00:07:16,040
所以首先，我们要定义这个助理函数

128
00:07:16,040 --> 00:07:19,040
这个函数要做的是收集

129
00:07:19,040 --> 00:07:24,840
我们的用户信息，这样我们就可以避免像上面那样用手输入信息了

130
00:07:24,840 --> 00:07:29,760
这将从我们下面建立的用户界面上收集提示信息

131
00:07:29,760 --> 00:07:32,800
然后将其追加到一个叫做"上下文"的列表中

132
00:07:32,800 --> 00:07:36,280
然后它每次都会用这个上下文调用模型

133
00:07:36,280 --> 00:07:39,320
然后模型的响应也会被添加到上下文中

134
00:07:39,320 --> 00:07:43,560
所以模型的信息被添加到上下文中

135
00:07:43,560 --> 00:07:45,160
用户信息被添加到上下文中

136
00:07:45,160 --> 00:07:47,880
以此类推，它只会越来越长

137
00:07:47,880 --> 00:07:52,680
这样一来，模型就有了它所需要的信息来决定下一步该做什么

138
00:07:52,680 --> 00:07:58,600
现在我们将设置并运行这个用户界面来显示订单机器人

139
00:07:58,600 --> 00:08:00,360
所以这里是上下文

140
00:08:00,360 --> 00:08:04,200
并且它包含了包含菜单的系统信息

141
00:08:04,560 --> 00:08:08,160
请注意，每次我们调用语言模型的时候

142
00:08:08,160 --> 00:08:13,400
我们都会使用相同的上下文，而且这个上下文是随着时间的推移而建立的

143
00:08:13,400 --> 00:08:19,040
然后让我们来执行这个

144
00:08:22,880 --> 00:08:25,760
我要说，你好

145
00:08:25,760 --> 00:08:29,440
我想订购一个比萨饼

146
00:08:33,080 --> 00:08:35,400
助理说，太好了

147
00:08:35,400 --> 00:08:36,880
你想点什么比萨饼？

148
00:08:36,880 --> 00:08:40,520
我们有意大利香肠、奶酪和茄子比萨

149
00:08:40,520 --> 00:08:44,680
多少钱？

150
00:08:53,080 --> 00:08:56,880
很好。好的，我们得到了价格

151
00:08:56,880 --> 00:09:12,000
我想我觉得是中号茄子比萨。所以你可以想象

152
00:09:12,000 --> 00:09:14,000
我们可以继续这个对话

153
00:09:14,000 --> 00:09:17,720
让我们看看我们在系统信息中放了什么

154
00:09:18,280 --> 00:09:20,400
所以你是orderbot

155
00:09:20,400 --> 00:09:23,280
为一家比萨店收集订单的自动化服务

156
00:09:23,280 --> 00:09:24,600
你首先要问候顾客

157
00:09:24,600 --> 00:09:27,800
然后收集订单，再问是自取还是配送

158
00:09:27,800 --> 00:09:29,480
你等待收集整个订单

159
00:09:29,480 --> 00:09:31,680
然后总结一下，最后进行检查

160
00:09:31,680 --> 00:09:33,800
如果顾客还想添加其他东西

161
00:09:33,800 --> 00:09:36,400
如果是送货，你可以要求提供地址

162
00:09:36,400 --> 00:09:38,040
最后，你拿到付款

163
00:09:38,040 --> 00:09:40,240
确保清晰描述所有选项、附加服务、额外费用

164
00:09:40,240 --> 00:09:43,120
和尺寸，以便从菜单上精确识别该项目

165
00:09:43,120 --> 00:09:44,920
你需要以简短的

166
00:09:44,920 --> 00:09:46,840
健谈的、友好的风格来回答

167
00:09:46,840 --> 00:09:50,880
菜单包括，然后在这里我们有菜单

168
00:09:51,120 --> 00:09:54,200
所以让我们回到我们的对话

169
00:09:54,200 --> 00:09:58,720
让我们看看助理是否一直在遵循指示

170
00:09:58,720 --> 00:10:01,720
好的，很好。助理问我们是否需要任何配料

171
00:10:01,720 --> 00:10:05,760
我们在系统信息中指定了这一点

172
00:10:05,760 --> 00:10:09,600
所以我想我们不需要额外的配料

173
00:10:15,600 --> 00:10:18,680
当然可以。还有什么我们想点的吗？

174
00:10:18,680 --> 00:10:22,240
嗯。让我们来点水

175
00:10:22,240 --> 00:10:26,240
事实上，薯条

176
00:10:32,240 --> 00:10:34,240
小的还是大的？

177
00:10:34,240 --> 00:10:36,240
这很好，因为我们在系统信息中

178
00:10:36,240 --> 00:10:41,240
要求助理在系统信息中说明额外的东西和配菜

179
00:10:46,240 --> 00:10:50,240
这样你就明白了，你可以随意试玩一下这个过程

180
00:10:50,240 --> 00:10:55,240
可以暂停视频，在左边的Notebook上运行这个

181
00:10:55,240 --> 00:10:59,240
现在我们可以要求该模型创建一个JSON摘要

182
00:10:59,240 --> 00:11:03,240
我们可以在对话的基础上发送至订单系统

183
00:11:03,240 --> 00:11:06,240
所以，我们现在要附加另一个系统消息

184
00:11:06,240 --> 00:11:08,240
这是一个指令

185
00:11:08,240 --> 00:11:11,240
我们在说创建一个关于之前食品订单的JSON摘要

186
00:11:11,240 --> 00:11:13,240
逐项列出每一项的价格

187
00:11:13,240 --> 00:11:18,240
字段应该是一个比萨饼，包括配菜

188
00:11:18,240 --> 00:11:21,240
两张配料表，三张饮料表

189
00:11:21,240 --> 00:11:23,240
和四份配菜清单

190
00:11:23,240 --> 00:11:25,240
最后是总价格

191
00:11:25,240 --> 00:11:29,240
你也可以在这里使用一个用户信息

192
00:11:29,240 --> 00:11:33,240
这不一定是一个系统消息

193
00:11:33,240 --> 00:11:36,240
所以让我们来执行这个

194
00:11:36,240 --> 00:11:39,240
注意在这种情况下，我们需要使用更低的temperature

195
00:11:39,240 --> 00:11:41,240
因为对于这些类型的任务

196
00:11:41,240 --> 00:11:43,240
我们希望输出是相当可预测的

197
00:11:43,240 --> 00:11:47,240
对于一个对话式的代理，你可能想使用更高的temperature

198
00:11:47,240 --> 00:11:50,240
然而，在这种情况下，我可能也会使用一个较低的temperature

199
00:11:50,240 --> 00:11:53,240
因为对于一个客户助理聊天机器人来说

200
00:11:53,240 --> 00:11:59,240
你可能想让输出更可预测一些

201
00:11:59,240 --> 00:12:02,240
因此，在这里我们有我们的订单摘要

202
00:12:02,240 --> 00:12:07,240
如果我们想的话，我们可以把这个提交给订单系统

203
00:12:07,240 --> 00:12:08,240
这就是我们需要的

204
00:12:08,240 --> 00:12:11,240
你已经建立了你自己的订单聊天机器人

205
00:12:11,240 --> 00:12:13,240
你可以自由地定制它

206
00:12:13,240 --> 00:12:16,240
试玩一下系统信息

207
00:12:16,240 --> 00:12:19,240
并改变聊天机器人的行为

208
00:12:19,240 --> 00:12:46,240
让它作为具有不同知识的不同角色行事

