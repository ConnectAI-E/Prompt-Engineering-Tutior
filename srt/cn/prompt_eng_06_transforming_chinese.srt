1
00:00:05,000 --> 00:00:09,840
大语言模型非常善于将其输入转换为不同的格式

2
00:00:09,840 --> 00:00:14,100
例如，输入一种语言的文本并将其转换或

3
00:00:14,100 --> 00:00:19,300
把它翻译成不同的语言，或者帮助进行拼写和语法的修正

4
00:00:19,300 --> 00:00:21,780
因此，将一段可能不符合标准的语法文本作为输入

5
00:00:21,780 --> 00:00:25,020
并让它帮助你纠正拼写和语法

6
00:00:25,020 --> 00:00:28,380
或甚至转换格式，如

7
00:00:28,380 --> 00:00:31,100
输入HTML和输出JSON

8
00:00:31,100 --> 00:00:35,140
所以，我以前写的一些应用程序有点痛苦，用的是

9
00:00:35,140 --> 00:00:38,100
一堆正则表达式的应用

10
00:00:38,100 --> 00:00:41,800
现在用一个大语言模型和一些提示语就可以更简单地实现

11
00:00:41,800 --> 00:00:46,500
是的，我现在用ChatGPT来校对我写的几乎所有东西

12
00:00:46,500 --> 00:00:50,340
所以我很高兴现在向你展示Notebook中的一些更多的例子

13
00:00:50,340 --> 00:00:55,900
所以，首先，我们将导入openai，同时

14
00:00:55,900 --> 00:01:01,180
使用我们在整个视频中一直使用的get_completion辅助函数

15
00:01:01,180 --> 00:01:04,540
我们要做的第一件事是一个翻译任务

16
00:01:04,540 --> 00:01:09,940
因此，大语言模型是在许多来源的大量文本上训练出来的

17
00:01:09,940 --> 00:01:11,100
其中有很多是互联网

18
00:01:11,100 --> 00:01:13,600
这当然是用许多不同的语言

19
00:01:13,600 --> 00:01:17,580
因此，这使模型具有翻译能力

20
00:01:17,580 --> 00:01:22,380
这些模型知道数百种语言的不同程度的熟练程度

21
00:01:22,380 --> 00:01:26,540
所以我们将通过一些例子来说明如何使用这种能力

22
00:01:26,540 --> 00:01:29,580
所以，让我们从简单的东西开始

23
00:01:29,580 --> 00:01:31,540
所以在这第一个例子中

24
00:01:31,540 --> 00:01:35,700
提示是将以下英文文本翻译成西班牙语

25
00:01:35,700 --> 00:01:38,260
你好，我想订购一台搅拌机

26
00:01:38,260 --> 00:01:40,620
响应是：Hola

27
00:01:40,620 --> 00:01:45,580
me gustaría ordenar una licuadora.

28
00:01:45,580 --> 00:01:48,660
我对所有讲西班牙语的人感到非常抱歉

29
00:01:48,660 --> 00:01:53,620
我从来没有学过西班牙语，很不幸，你肯定能看出来

30
00:01:54,500 --> 00:01:57,220
让我们尝试另一个例子

31
00:01:57,220 --> 00:02:00,460
所以在这个例子中

32
00:02:00,460 --> 00:02:04,220
提示是，告诉我这是什么语言

33
00:02:04,220 --> 00:02:06,980
那么这是用法语说的

34
00:02:06,980 --> 00:02:09,700
combien coûte le lampadaire?

35
00:02:09,700 --> 00:02:12,020
所以我们来运行这个

36
00:02:12,820 --> 00:02:17,340
该模型已经识别出这是法语

37
00:02:17,340 --> 00:02:22,220
该模型还可以一次做多个翻译

38
00:02:22,220 --> 00:02:23,900
所以在这个例子中

39
00:02:23,900 --> 00:02:27,740
让我们说把下面的文字翻译成法语和西班牙语

40
00:02:27,740 --> 00:02:29,940
你知道吗，让我们再加一个

41
00:02:29,940 --> 00:02:34,060
英国海盗

42
00:02:34,380 --> 00:02:38,500
这段文字是，我想订购一个篮球

43
00:02:40,460 --> 00:02:43,180
所以这里我们有法语

44
00:02:43,180 --> 00:02:47,300
西班牙文，和英国海盗

45
00:02:47,300 --> 00:02:49,300
所以在某些语言中

46
00:02:49,300 --> 00:02:51,340
翻译可以改变，取决于

47
00:02:51,340 --> 00:02:53,660
说话人与听话人的关系

48
00:02:53,660 --> 00:02:56,860
你也可以向语言模型解释这一点

49
00:02:56,860 --> 00:03:00,380
这样它就能进行相应的翻译

50
00:03:00,380 --> 00:03:02,540
所以在这个例子中

51
00:03:02,540 --> 00:03:07,220
我们说把下面的文字以正式和非正式的形式翻译成西班牙语

52
00:03:07,220 --> 00:03:09,060
你想订购一个枕头吗？

53
00:03:09,060 --> 00:03:11,260
还注意到，我们在这里使用了

54
00:03:11,260 --> 00:03:14,300
不同的分隔符，而不是这些双引号

55
00:03:14,300 --> 00:03:18,260
其实这并不重要，只要它是一个清晰的分隔

56
00:03:18,260 --> 00:03:22,700
所以这里我们有正式和非正式

57
00:03:22,700 --> 00:03:25,580
因此，正式的是当你和某人说话时，他是

58
00:03:25,580 --> 00:03:28,980
也许比你高级的人，或者你是在一个专业的情况下

59
00:03:28,980 --> 00:03:30,340
这时你要使用正式语气

60
00:03:30,340 --> 00:03:34,540
然后非正式的是当你和一群朋友说话时

61
00:03:34,540 --> 00:03:36,300
我实际上不会说西班牙语

62
00:03:36,300 --> 00:03:39,500
但我父亲会，他说这是正确的

63
00:03:39,500 --> 00:03:42,020
因此，对于

64
00:03:42,020 --> 00:03:47,900
我们要假装自己是一家跨国电子商务公司的负责人

65
00:03:47,900 --> 00:03:51,780
用户的信息将使用所有不同的语言

66
00:03:51,780 --> 00:03:57,340
因此，用户将用各种不同的语言告诉我们关于IT的问题

67
00:03:57,340 --> 00:04:00,300
所以我们需要一个通用的翻译器

68
00:04:00,300 --> 00:04:06,980
因此，首先，我们将粘贴一个各种不同语言的用户信息的列表

69
00:04:06,980 --> 00:04:15,660
现在，我们将循环浏览这些用户信息中的每一条

70
00:04:15,660 --> 00:04:19,900
因此，对于用户信息中的问题

71
00:04:19,980 --> 00:04:25,220
然后我将复制稍长的代码块

72
00:04:25,220 --> 00:04:28,740
所以我们要做的第一件事是要求模型

73
00:04:28,740 --> 00:04:32,420
告诉我们这个问题是什么语言的

74
00:04:32,420 --> 00:04:34,260
所以这里是提示

75
00:04:34,260 --> 00:04:40,380
然后，我们将打印出原始信息的语言和问题

76
00:04:40,380 --> 00:04:45,100
然后我们将要求模型将其翻译成英语和韩语

77
00:04:45,100 --> 00:04:51,860
所以让我们运行这个。所以，原始信息是法语

78
00:04:55,740 --> 00:04:58,300
所以我们有各种语言

79
00:04:58,300 --> 00:05:02,940
然后模型将它们翻译成英语和韩语

80
00:05:02,940 --> 00:05:06,180
你可以看到这里，所以模型说

81
00:05:06,180 --> 00:05:07,700
这是法语

82
00:05:07,700 --> 00:05:13,380
所以这是因为这个提示的反应将是，这是法语

83
00:05:13,380 --> 00:05:16,180
你可以尝试将这个提示编辑成这样的内容

84
00:05:16,180 --> 00:05:17,540
告诉我这是什么语言

85
00:05:17,540 --> 00:05:22,220
只用一个词来回答或不用句子

86
00:05:22,220 --> 00:05:25,340
如果你希望这只是一个词的话

87
00:05:25,340 --> 00:05:28,580
或者你可以要求它以JSON格式或类似的东西

88
00:05:28,580 --> 00:05:33,420
这可能会鼓励它不要使用整个句子

89
00:05:33,420 --> 00:05:38,620
因此，令人惊讶的是，你刚刚建立了一个通用翻译器

90
00:05:38,620 --> 00:05:45,180
也可以随时暂停视频，在这里添加任何你想尝试的其他语言

91
00:05:45,180 --> 00:05:47,340
也许是你自己说的语言

92
00:05:47,340 --> 00:05:49,860
看看这个模型是怎么做的

93
00:05:49,860 --> 00:05:55,060
因此，我们接下来要深入研究的是语气转换

94
00:05:55,060 --> 00:05:58,300
写作可以根据目标受众而有所不同

95
00:05:58,300 --> 00:06:03,140
我给同事或教授写电子邮件的方式

96
00:06:03,140 --> 00:06:06,820
显然会与我给我弟弟发短信的方式完全不同

97
00:06:06,820 --> 00:06:10,980
所以ChatGPT实际上也可以帮助产生不同的语气

98
00:06:10,980 --> 00:06:14,260
因此，让我们看一些例子

99
00:06:14,260 --> 00:06:16,620
在这第一个例子中

100
00:06:16,620 --> 00:06:20,780
提示是，将以下内容从俚语翻译成商务信函

101
00:06:20,780 --> 00:06:22,100
老兄，这是乔

102
00:06:22,100 --> 00:06:25,180
检查一下这盏落地灯的规格

103
00:06:25,180 --> 00:06:29,460
因此，让我们来执行这个

104
00:06:30,460 --> 00:06:35,500
正如你所看到的，我们有一封更正式的商业信函

105
00:06:35,500 --> 00:06:39,660
有一个关于落地灯规格的建议

106
00:06:39,660 --> 00:06:44,580
我们要做的下一件事是在不同的格式之间进行转换

107
00:06:44,580 --> 00:06:50,260
ChatGPT非常善于在不同的格式之间进行转换，如JSON到HTML

108
00:06:50,260 --> 00:06:54,300
XML，各种各样的东西，markdown

109
00:06:54,300 --> 00:06:58,660
所以在提示中，我们将描述输入和输出的格式

110
00:06:58,660 --> 00:07:01,900
所以这里有一个例子

111
00:07:01,900 --> 00:07:05,100
所以我们有这样一个JSON

112
00:07:05,100 --> 00:07:10,340
它包含一个餐厅员工的名单，包括他们的名字和电子邮件

113
00:07:10,340 --> 00:07:12,580
然后在提示中

114
00:07:12,580 --> 00:07:17,940
我们将要求模型将其从JSON翻译成HTML

115
00:07:17,940 --> 00:07:22,100
所以提示是，把下面的Python字典从JSON翻译成

116
00:07:22,100 --> 00:07:26,260
HTML，包括列头和标题

117
00:07:28,220 --> 00:07:35,380
然后我们将从模型中得到响应并打印出来

118
00:07:35,380 --> 00:07:44,140
所以这里我们有一些HTML显示所有的雇员姓名和电子邮件

119
00:07:44,140 --> 00:07:49,220
那么现在让我们来看看我们是否可以作为

120
00:07:49,220 --> 00:07:54,460
所以我们要使用这个Python库中的这个显示函数

121
00:07:54,460 --> 00:07:58,860
显示 HTML 响应

122
00:08:00,100 --> 00:08:06,340
在这里你可以看到这是一个正确格式化的HTML表格

123
00:08:06,420 --> 00:08:13,100
我们要做的下一个转换任务是拼写检查和语法检查

124
00:08:13,100 --> 00:08:16,740
这是ChatGPT的一个非常流行的用途

125
00:08:16,740 --> 00:08:18,780
我强烈建议这样做

126
00:08:18,780 --> 00:08:20,060
我一直在做这个

127
00:08:20,060 --> 00:08:23,380
当你用非母语工作时，它尤其有用

128
00:08:23,380 --> 00:08:28,140
因此，这里有一些常见的语法和拼写问题的例子

129
00:08:28,140 --> 00:08:31,580
以及语言模型如何帮助解决这些问题

130
00:08:31,580 --> 00:08:40,500
所以我将粘贴一个有一些语法或拼写错误的句子列表

131
00:08:40,500 --> 00:08:46,420
然后，我们将循环浏览每一个句子

132
00:08:49,140 --> 00:08:50,740
然后

133
00:08:51,620 --> 00:08:56,620
让模型进行校对

134
00:08:56,620 --> 00:09:02,500
校对并进行修正。然后我们将使用一些分隔符

135
00:09:11,500 --> 00:09:15,500
然后我们将获取响应并将其打印出来，就像往常一样

136
00:09:35,260 --> 00:09:41,420
就这样，这个模型能够纠正所有这些语法错误

137
00:09:41,420 --> 00:09:44,180
我们可以使用我们之前讨论过的一些技术

138
00:09:44,180 --> 00:09:50,100
因此，为了改进提示，我们可以说校对和纠正以下文字

139
00:09:50,100 --> 00:09:54,580
并重写

140
00:09:54,580 --> 00:09:55,580
哦

141
00:09:55,580 --> 00:10:05,580
并重写整个

142
00:10:05,580 --> 00:10:10,580
并重写

143
00:10:10,580 --> 00:10:16,580
改正后的版本

144
00:10:16,580 --> 00:10:25,700
如果你没有发现任何错误，就说没有发现错误

145
00:10:25,700 --> 00:10:29,700
让我们来试试这个

146
00:10:29,700 --> 00:10:37,700
因此，这种方式我们能够，哦，他们在这里仍然使用引号

147
00:10:37,700 --> 00:10:42,940
但你可以想象，你能够找到一种方法，用一点点的

148
00:10:42,940 --> 00:10:45,780
迭代提示开发

149
00:10:45,780 --> 00:10:49,260
找到一种更可靠的提示方式，每一次都能正常工作

150
00:10:49,260 --> 00:10:51,700
因此，现在我们将实现另一个例子

151
00:10:51,700 --> 00:10:56,040
在你把你的文本发布到公共论坛之前，检查它总是有用的

152
00:10:56,040 --> 00:10:59,100
因此，我们将通过一个检查评论的例子

153
00:10:59,100 --> 00:11:01,980
这里有一个关于毛绒熊猫的评论

154
00:11:01,980 --> 00:11:06,740
因此，我们将要求模型校对和纠正评论

155
00:11:06,740 --> 00:11:11,100
很好。所以我们有了这个更正的版本

156
00:11:11,100 --> 00:11:14,860
我们可以做的一件很酷的事情是找到

157
00:11:14,860 --> 00:11:19,180
我们的原始评论和模型的输出之间的差异

158
00:11:19,180 --> 00:11:24,380
所以我们要基于这个Redlines Python包来做这个

159
00:11:24,380 --> 00:11:26,800
我们将得到以下的差异

160
00:11:26,800 --> 00:11:32,460
我们评论的原文和模型的输出之间的差异

161
00:11:32,460 --> 00:11:36,740
然后显示这个

162
00:11:36,740 --> 00:11:40,340
所以在这里你可以看到原始评论和模型输出之间的差异

163
00:11:40,340 --> 00:11:44,940
和模型输出之间的差异，以及那些已经被纠正的东西

164
00:11:44,940 --> 00:11:49,380
因此，我们使用的提示是校对和纠正这个评论

165
00:11:49,380 --> 00:11:52,820
但你也可以做一些更戏剧性的改变

166
00:11:52,820 --> 00:11:55,700
语气的变化，以及诸如此类的事情

167
00:11:55,700 --> 00:12:00,340
因此，让我们再试一试

168
00:12:00,340 --> 00:12:04,500
所以在这个提示中，我们将要求模特校对和纠正

169
00:12:04,500 --> 00:12:08,700
同样的评论，但也要使其更有说服力，并确保其

170
00:12:08,700 --> 00:12:11,860
遵循APA风格，并针对高级读者

171
00:12:11,860 --> 00:12:14,860
我们还将要求以Markdown格式输出结果

172
00:12:14,860 --> 00:12:18,780
因此，我们在这里使用原始审查的相同文本

173
00:12:18,780 --> 00:12:23,260
因此，让我们来执行这个

174
00:12:23,260 --> 00:12:30,380
在这里，我们有一个扩展的APA风格的毛绒熊猫的评论

175
00:12:30,380 --> 00:12:32,300
因此，这是它的转换视频

176
00:12:32,300 --> 00:12:35,700
接下来，我们将使用扩写功能，采取较短的提示

177
00:12:35,700 --> 00:12:54,180
并从语言模型中产生一个更长、更自由的反应

