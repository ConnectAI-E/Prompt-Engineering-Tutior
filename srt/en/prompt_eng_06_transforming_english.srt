1
00:00:05,000 --> 00:00:09,840
Large language models are very good at transforming its input to a different format

2
00:00:09,840 --> 00:00:14,100
such as inputting a piece of text in one language and transforming it or

3
00:00:14,100 --> 00:00:19,300
translating it to a different language or helping with spelling and grammar corrections

4
00:00:19,300 --> 00:00:21,780
So taking as input a piece of text that may not be

5
00:00:21,780 --> 00:00:25,020
fully grammatical and helping you to fix that up a bit

6
00:00:25,020 --> 00:00:28,380
or even transforming formats such as inputting

7
00:00:28,380 --> 00:00:31,100
HTML and outputting JSON

8
00:00:31,100 --> 00:00:35,140
So there's a bunch of applications that I used to write somewhat painfully with

9
00:00:35,140 --> 00:00:38,100
a bunch of regular expressions that would definitely be much more

10
00:00:38,100 --> 00:00:41,800
simply implemented now with a large language model and a few prompts

11
00:00:41,800 --> 00:00:46,500
Yeah, I use ChatGPT to proofread pretty much everything I write these days

12
00:00:46,500 --> 00:00:50,340
So I'm excited to show you some more examples in the notebook now

13
00:00:50,340 --> 00:00:55,900
So first, we'll import openai and also

14
00:00:55,900 --> 00:01:01,180
use the same get_completion helper function that we've been using throughout the videos

15
00:01:01,180 --> 00:01:04,540
The first thing we'll do is a translation task

16
00:01:04,540 --> 00:01:09,940
So large language models are trained on a lot of text from many sources

17
00:01:09,940 --> 00:01:11,100
a lot of which is the Internet

18
00:01:11,100 --> 00:01:13,600
and this is of course in many different languages

19
00:01:13,600 --> 00:01:17,580
So this imbues the model with the ability to do translation

20
00:01:17,580 --> 00:01:22,380
These models know hundreds of languages to varying degrees of proficiency

21
00:01:22,380 --> 00:01:26,540
So we'll go through some examples of how to use this capability

22
00:01:26,540 --> 00:01:29,580
So let's start off with something simple

23
00:01:29,580 --> 00:01:31,540
So in this first example

24
00:01:31,540 --> 00:01:35,700
the prompt is translate the following English text to Spanish

25
00:01:35,700 --> 00:01:38,260
Hi, I would like to order a blender

26
00:01:38,260 --> 00:01:40,620
The response is, Hola

27
00:01:40,620 --> 00:01:45,580
me gustaría ordenar una licuadora

28
00:01:45,580 --> 00:01:48,660
I'm very sorry to all of you Spanish speakers

29
00:01:48,660 --> 00:01:53,620
I never learned Spanish unfortunately, as you can definitely tell

30
00:01:54,500 --> 00:01:57,220
Let's try another example

31
00:01:57,220 --> 00:02:00,460
So in this example

32
00:02:00,460 --> 00:02:04,220
the prompt is, tell me what language this is

33
00:02:04,220 --> 00:02:06,980
Then this is in French

34
00:02:06,980 --> 00:02:09,700
combien coûte le lampadaire?

35
00:02:09,700 --> 00:02:12,020
So let's run this

36
00:02:12,820 --> 00:02:17,340
The model has identified that this is French

37
00:02:17,340 --> 00:02:22,220
The model can also do multiple translations at once

38
00:02:22,220 --> 00:02:23,900
So in this example

39
00:02:23,900 --> 00:02:27,740
let's say translate the following text to French and Spanish

40
00:02:27,740 --> 00:02:29,940
You know what, let's add another

41
00:02:29,940 --> 00:02:34,060
an English pirate

42
00:02:34,380 --> 00:02:38,500
The text is, I want to order a basketball

43
00:02:40,460 --> 00:02:43,180
So here we have French

44
00:02:43,180 --> 00:02:47,300
Spanish, and English pirate

45
00:02:47,300 --> 00:02:49,300
So in some languages

46
00:02:49,300 --> 00:02:51,340
the translation can change depending on

47
00:02:51,340 --> 00:02:53,660
the speaker's relationship to the listener

48
00:02:53,660 --> 00:02:56,860
You can also explain this to the language model

49
00:02:56,860 --> 00:03:00,380
and so it will be able to translate accordingly

50
00:03:00,380 --> 00:03:02,540
So in this example

51
00:03:02,540 --> 00:03:07,220
we say translate the following text to Spanish in both the formal and informal forms

52
00:03:07,220 --> 00:03:09,060
Would you like to order a pillow?

53
00:03:09,060 --> 00:03:11,260
Also notice here, we're using

54
00:03:11,260 --> 00:03:14,300
a different delimiter than these backticks

55
00:03:14,300 --> 00:03:18,260
It doesn't really matter as long as it's a clear separation

56
00:03:18,260 --> 00:03:22,700
So here we have the formal and informal

57
00:03:22,700 --> 00:03:25,580
So formal is when you're speaking to someone who's

58
00:03:25,580 --> 00:03:28,980
maybe senior to you or you're in a professional situation

59
00:03:28,980 --> 00:03:30,340
That's when you use a formal tone

60
00:03:30,340 --> 00:03:34,540
and then informal is when you're speaking to maybe a group of friends

61
00:03:34,540 --> 00:03:36,300
I don't actually speak Spanish

62
00:03:36,300 --> 00:03:39,500
but my dad does and he says that this is correct

63
00:03:39,500 --> 00:03:42,020
So for the next example

64
00:03:42,020 --> 00:03:47,900
we're going to pretend that we're in charge of a multinational e-commerce company

65
00:03:47,900 --> 00:03:51,780
and so the user messages are going to be in all different languages

66
00:03:51,780 --> 00:03:57,340
and so users are going to be telling us about the IT issues in wide variety of languages

67
00:03:57,340 --> 00:04:00,300
So we need a universal translator

68
00:04:00,300 --> 00:04:06,980
So first, we'll just paste in a list of user messages in a variety of different languages

69
00:04:06,980 --> 00:04:15,660
Now, we will loop through each of these user messages

70
00:04:15,660 --> 00:04:19,900
So for issue in user messages

71
00:04:19,980 --> 00:04:25,220
and then I'm going to copy over the slightly longer code block

72
00:04:25,220 --> 00:04:28,740
So the first thing we'll do is ask the model

73
00:04:28,740 --> 00:04:32,420
to tell us what language the issue is in

74
00:04:32,420 --> 00:04:34,260
So here's the prompt

75
00:04:34,260 --> 00:04:40,380
Then we'll print out the original messages language and the issue

76
00:04:40,380 --> 00:04:45,100
and then we'll ask the model to translate it into English and Korean

77
00:04:45,100 --> 00:04:51,860
So let's run this. So the original message in French

78
00:04:55,740 --> 00:04:58,300
So we have a variety of languages

79
00:04:58,300 --> 00:05:02,940
and then the model translates them into English and then Korean

80
00:05:02,940 --> 00:05:06,180
You can see here, so the model says

81
00:05:06,180 --> 00:05:07,700
this is French

82
00:05:07,700 --> 00:05:13,380
So that's because the response from this prompt is going to be, this is French

83
00:05:13,380 --> 00:05:16,180
You could try editing this prompt to say something like

84
00:05:16,180 --> 00:05:17,540
tell me what language this is

85
00:05:17,540 --> 00:05:22,220
respond with only one word or don't use a sentence

86
00:05:22,220 --> 00:05:25,340
that kind of thing if you wanted this to just be one word

87
00:05:25,340 --> 00:05:28,580
or you could ask for it in a JSON format or something like that

88
00:05:28,580 --> 00:05:33,420
which would probably encourage it to not use a whole sentence

89
00:05:33,420 --> 00:05:38,620
So amazing, you've just built a universal translator

90
00:05:38,620 --> 00:05:45,180
and also feel free to pause the video and add any other languages you want to try here

91
00:05:45,180 --> 00:05:47,340
maybe languages you speak yourself

92
00:05:47,340 --> 00:05:49,860
and see how the model does

93
00:05:49,860 --> 00:05:55,060
So the next thing we're going to dive into is tone transformation

94
00:05:55,060 --> 00:05:58,300
Writing can vary based on an intended audience

95
00:05:58,300 --> 00:06:03,140
the way that I would write an e-mail to a colleague or a professor

96
00:06:03,140 --> 00:06:06,820
is obviously going to be quite different to the way I text my younger brother

97
00:06:06,820 --> 00:06:10,980
So ChatGPT can actually also help produce different tones

98
00:06:10,980 --> 00:06:14,260
So let's look at some examples

99
00:06:14,260 --> 00:06:16,620
So in this first example

100
00:06:16,620 --> 00:06:20,780
the prompt is, translate the following from slang to a business letter

101
00:06:20,780 --> 00:06:22,100
Dude, this is Joe

102
00:06:22,100 --> 00:06:25,180
check out the spec on the standing lamp

103
00:06:25,180 --> 00:06:29,460
So let's execute this

104
00:06:30,460 --> 00:06:35,500
As you can see, we have a much more formal business letter

105
00:06:35,500 --> 00:06:39,660
with a proposal for a standing lamp specification

106
00:06:39,660 --> 00:06:44,580
The next thing that we're going to do is to convert between different formats

107
00:06:44,580 --> 00:06:50,260
ChatGPT is very good at translating between different formats such as JSON to HTML

108
00:06:50,260 --> 00:06:54,300
XML, all kinds of things, markdown

109
00:06:54,300 --> 00:06:58,660
So in the prompt, we'll describe both the input and the output formats

110
00:06:58,660 --> 00:07:01,900
So here is an example

111
00:07:01,900 --> 00:07:05,100
So we have this JSON that

112
00:07:05,100 --> 00:07:10,340
contains a list of restaurant employees with their name and e-mail

113
00:07:10,340 --> 00:07:12,580
Then in the prompt

114
00:07:12,580 --> 00:07:17,940
we're going to ask the model to translate this from JSON to HTML

115
00:07:17,940 --> 00:07:22,100
So the prompt is, translate the following Python dictionary from JSON to

116
00:07:22,100 --> 00:07:26,260
HTML with column headers and titles

117
00:07:28,220 --> 00:07:35,380
Then we'll get the response from the model and print it

118
00:07:35,380 --> 00:07:44,140
So here we have some HTML displaying all of the employee names and e-mails

119
00:07:44,140 --> 00:07:49,220
So now let's see if we can actually view this HTML

120
00:07:49,220 --> 00:07:54,460
So we're going to use this display function from this Python library

121
00:07:54,460 --> 00:07:58,860
display HTML response

122
00:08:00,100 --> 00:08:06,340
Here you can see that this is a properly formatted HTML table

123
00:08:06,420 --> 00:08:13,100
The next transformation task we're going to do is spell check and grammar checking

124
00:08:13,100 --> 00:08:16,740
This is a really popular use for ChatGPT

125
00:08:16,740 --> 00:08:18,780
I highly recommend doing this

126
00:08:18,780 --> 00:08:20,060
I do this all the time

127
00:08:20,060 --> 00:08:23,380
It's especially useful when you're working in a non-native language

128
00:08:23,380 --> 00:08:28,140
So here are some examples of some common grammar and spelling problems

129
00:08:28,140 --> 00:08:31,580
and how the language model can help address these

130
00:08:31,580 --> 00:08:40,500
So I'm going to paste in a list of sentences that have some grammatical or spelling errors

131
00:08:40,500 --> 00:08:46,420
Then we're going to loop through each of these sentences

132
00:08:49,140 --> 00:08:50,740
And

133
00:08:51,620 --> 00:08:56,620
ask the model to proofread these.

134
00:08:56,620 --> 00:09:02,500
Proofread and correct. And then we'll use some delimiters.

135
00:09:11,500 --> 00:09:15,500
And then we will get the response and print it as usual.

136
00:09:35,260 --> 00:09:41,420
And so the model is able to correct all of these grammatical errors

137
00:09:41,420 --> 00:09:44,180
We could use some of the techniques that we've discussed before

138
00:09:44,180 --> 00:09:50,100
So to improve the prompt, we could say proofread and correct the following text

139
00:09:50,100 --> 00:09:54,580
And rewrite

140
00:09:54,580 --> 00:09:55,580
Oh

141
00:09:55,580 --> 00:10:05,580
And rewrite the whole

142
00:10:05,580 --> 00:10:10,580
And rewrite it

143
00:10:10,580 --> 00:10:16,580
Corrected version

144
00:10:16,580 --> 00:10:25,700
If you don't find any errors, just say no errors found

145
00:10:25,700 --> 00:10:29,700
Let's try this

146
00:10:29,700 --> 00:10:37,700
So this way we were able to, oh, they're still using quotes here

147
00:10:37,700 --> 00:10:42,940
But you can imagine you'd be able to find a way with a little bit of

148
00:10:42,940 --> 00:10:45,780
iterative prompt development to

149
00:10:45,780 --> 00:10:49,260
kind of find a prompt that works more reliably every single time

150
00:10:49,260 --> 00:10:51,700
And so now we'll do another example

151
00:10:51,700 --> 00:10:56,040
It's always useful to check your text before you post it in a public forum

152
00:10:56,040 --> 00:10:59,100
And so we'll go through an example of checking a review

153
00:10:59,100 --> 00:11:01,980
And so here is a review about a stuffed panda

154
00:11:01,980 --> 00:11:06,740
And so we're going to ask the model to proofread and correct the review

155
00:11:06,740 --> 00:11:11,100
Great. So we have this corrected version

156
00:11:11,100 --> 00:11:14,860
And one cool thing we can do is find

157
00:11:14,860 --> 00:11:19,180
the kind of differences between our original review and the model's output

158
00:11:19,180 --> 00:11:24,380
So we're going to use this red lines Python package to do this

159
00:11:24,380 --> 00:11:26,800
And we're going to get the diff between

160
00:11:26,800 --> 00:11:32,460
the original text of our review and the model output

161
00:11:32,460 --> 00:11:36,740
and then display this

162
00:11:36,740 --> 00:11:40,340
And so here you can see the diff between the original review

163
00:11:40,340 --> 00:11:44,940
and the model output and the kind of things that have been corrected

164
00:11:44,940 --> 00:11:49,380
So the prompt that we use was proofread and correct this review

165
00:11:49,380 --> 00:11:52,820
But you can also make kind of more dramatic changes

166
00:11:52,820 --> 00:11:55,700
kind of changes to tone and that kind of thing

167
00:11:55,700 --> 00:12:00,340
So let's try one more thing

168
00:12:00,340 --> 00:12:04,500
So in this prompt, we're going to ask the model to proofread and correct

169
00:12:04,500 --> 00:12:08,700
the same review, but also make it more compelling and ensure that it

170
00:12:08,700 --> 00:12:11,860
follows APA style and targets an advanced reader

171
00:12:11,860 --> 00:12:14,860
And we're also going to ask for the output in markdown format

172
00:12:14,860 --> 00:12:18,780
And so we're using the same text from the original review up here

173
00:12:18,780 --> 00:12:23,260
So let's execute this

174
00:12:23,260 --> 00:12:30,380
And here we have a expanded APA style review of the soft Panda

175
00:12:30,380 --> 00:12:32,300
So this is it for the transforming video

176
00:12:32,300 --> 00:12:35,700
Next up, we have expanding where we'll take a shorter prompt

177
00:12:35,700 --> 00:12:54,180
and kind of generate a longer, more freeform response from a language model

