1
00:00:05,000 --> 00:00:08,060
When I've been building applications with large language models

2
00:00:08,060 --> 00:00:10,240
I don't think I've ever come to the prompt that I ended up

3
00:00:10,240 --> 00:00:13,560
using in the final application on my first attempt

4
00:00:13,560 --> 00:00:15,180
And this isn't what matters

5
00:00:15,180 --> 00:00:19,860
As long as you have a good process to iteratively make your prompt better

6
00:00:19,860 --> 00:00:22,100
then you'll be able to come to something that

7
00:00:22,100 --> 00:00:24,680
works well for the task you want to achieve

8
00:00:24,680 --> 00:00:28,000
You may have heard me say that when I train a machine learning model

9
00:00:28,000 --> 00:00:29,920
it almost never works the first time

10
00:00:29,920 --> 00:00:33,360
In fact, I'm very surprised that the first model I trained works

11
00:00:33,360 --> 00:00:37,160
I think we're prompting, the odds of it working the first time is maybe a little bit

12
00:00:37,160 --> 00:00:39,640
higher but as she's saying

13
00:00:39,640 --> 00:00:42,060
doesn't matter if the first prompt works

14
00:00:42,060 --> 00:00:46,640
what matters most is the process for getting to prompts that works for your application

15
00:00:46,640 --> 00:00:49,520
So with that, let's jump into the code and let me show you

16
00:00:49,520 --> 00:00:53,680
some frameworks to think about how to iteratively develop a prompt

17
00:00:53,680 --> 00:00:57,840
All right. So if you've taken a machine learning class with me

18
00:00:57,840 --> 00:01:02,760
before you may have seen me use a diagram saying that with machine learning development

19
00:01:02,760 --> 00:01:06,440
you often have an idea and then implement it

20
00:01:06,440 --> 00:01:08,780
So write the code, get the data

21
00:01:08,780 --> 00:01:12,720
train your model and that gives you an experimental result

22
00:01:12,720 --> 00:01:14,380
And you can then look at that output

23
00:01:14,380 --> 00:01:16,080
maybe do error analysis

24
00:01:16,080 --> 00:01:17,760
figure out where it's working or not working

25
00:01:17,760 --> 00:01:19,760
and then maybe even change your idea of

26
00:01:19,760 --> 00:01:23,120
exactly what problem you want to solve or how to approach it

27
00:01:23,120 --> 00:01:25,680
And then change implementation and run

28
00:01:25,680 --> 00:01:27,920
another experiment and so on and iterate over and

29
00:01:27,920 --> 00:01:31,100
over to get to an effective machine learning model

30
00:01:31,100 --> 00:01:33,160
If you're not familiar with machine learning

31
00:01:33,160 --> 00:01:35,240
haven't seen this diagram before, don't worry about it

32
00:01:35,240 --> 00:01:38,200
Not that important for the rest of this presentation

33
00:01:38,200 --> 00:01:44,880
But when you are writing prompts to develop an application using an LLM

34
00:01:44,880 --> 00:01:48,300
the process can be quite similar

35
00:01:48,300 --> 00:01:50,580
where you have an idea for what you want to do

36
00:01:50,580 --> 00:01:52,040
the task you want to complete

37
00:01:52,040 --> 00:01:55,880
and you can then take a first attempt at writing

38
00:01:55,880 --> 00:01:59,400
a prompt that hopefully is clear and specific

39
00:01:59,400 --> 00:02:01,560
and maybe if appropriate

40
00:02:01,560 --> 00:02:04,120
gives the system time to think

41
00:02:04,120 --> 00:02:07,760
And then you can run it and see what result you get

42
00:02:07,760 --> 00:02:10,120
And if it doesn't work well enough the first time

43
00:02:10,120 --> 00:02:13,840
then the iterative process of figuring out why the instructions

44
00:02:13,840 --> 00:02:15,960
for example, were not clear enough or why it

45
00:02:15,960 --> 00:02:17,760
didn't give the algorithm enough time to think

46
00:02:17,760 --> 00:02:19,360
allows you to refine the idea

47
00:02:19,360 --> 00:02:21,260
refine the prompt, and so on

48
00:02:21,260 --> 00:02:23,240
and to go around this loop multiple times

49
00:02:23,240 --> 00:02:26,200
until you end up with a prompt that works for your application

50
00:02:26,200 --> 00:02:32,320
This too is why I personally have not paid as much attention to

51
00:02:32,320 --> 00:02:35,840
the Internet articles that say 30 perfect prompts because I think

52
00:02:35,840 --> 00:02:39,720
there probably isn't a perfect prompt for everything under the sun

53
00:02:39,720 --> 00:02:42,000
It's more important that you have a process for

54
00:02:42,000 --> 00:02:45,440
developing a good prompt for your specific application

55
00:02:45,440 --> 00:02:49,000
So let's look at an example together in code

56
00:02:49,000 --> 00:02:51,400
I have here the starter code that you saw in

57
00:02:51,400 --> 00:02:54,440
the previous videos have been import openai and port is

58
00:02:54,440 --> 00:02:58,240
Here we get the OpenAI API key

59
00:02:58,240 --> 00:03:02,280
and this is the same helper function that you saw as last time

60
00:03:02,280 --> 00:03:08,440
And I'm going to use as the running example in this video

61
00:03:08,440 --> 00:03:12,680
the task of summarizing a fact sheet for a chair

62
00:03:12,680 --> 00:03:16,280
So let me just paste that in here

63
00:03:16,280 --> 00:03:19,720
and feel free to pause the video and read

64
00:03:19,720 --> 00:03:23,120
this more carefully in the notebook on the left if you want

65
00:03:23,120 --> 00:03:26,800
But here's a fact sheet for a chair with a description saying it's part of

66
00:03:26,800 --> 00:03:30,320
a beautiful family of mid-century inspired and so on

67
00:03:30,320 --> 00:03:31,920
talks about the construction

68
00:03:31,920 --> 00:03:34,680
has the dimensions, options for the chair

69
00:03:34,680 --> 00:03:38,240
materials, and so on. It comes from Italy

70
00:03:38,240 --> 00:03:42,960
So let's say you want to take this fact sheet and help

71
00:03:42,960 --> 00:03:47,880
a marketing team write a description for an online retail website

72
00:03:47,880 --> 00:03:50,840
Let me just quickly run these three

73
00:03:50,840 --> 00:03:57,760
and then we'll come up with a prompt as follows

74
00:03:57,760 --> 00:04:01,440
I'll just paste this in

75
00:04:01,440 --> 00:04:03,400
So my prompt here says

76
00:04:03,400 --> 00:04:05,880
your task is to help a marketing team create

77
00:04:05,880 --> 00:04:08,960
a description for a retail website or product based on a techno fact sheet

78
00:04:08,960 --> 00:04:11,200
write a product description, and so on

79
00:04:11,200 --> 00:04:16,880
So this is my first attempt to explain the task to the large language model

80
00:04:16,880 --> 00:04:19,080
So let me hit Shift Enter

81
00:04:19,080 --> 00:04:22,240
and this takes a few seconds to run

82
00:04:22,360 --> 00:04:25,000
and we get this result

83
00:04:25,000 --> 00:04:29,200
It looks like it's done a nice job writing a description

84
00:04:29,200 --> 00:04:31,600
introducing a stunning mid-century inspired office chair

85
00:04:31,600 --> 00:04:33,560
perfect addition, and so on

86
00:04:33,560 --> 00:04:34,920
But when I look at this, I go

87
00:04:34,920 --> 00:04:36,560
boy, this is really long

88
00:04:36,560 --> 00:04:39,600
It's done a nice job doing exactly what I asked it to

89
00:04:39,600 --> 00:04:44,680
which is start from the technical fact sheet and write a product description

90
00:04:44,680 --> 00:04:46,760
But when I look at this, I go

91
00:04:46,760 --> 00:04:50,360
this is long, maybe we want it to be a little bit shorter

92
00:04:50,360 --> 00:04:52,920
So I had an idea

93
00:04:52,920 --> 00:04:54,720
I wrote a prompt, got a result

94
00:04:54,720 --> 00:04:56,880
I'm not that happy with it because it's too long

95
00:04:56,880 --> 00:05:02,120
So I will then clarify my prompt

96
00:05:02,120 --> 00:05:10,080
um, and say, use at most 50 words to try to give

97
00:05:10,080 --> 00:05:15,080
better guidance on the desired length of this and let's run it again

98
00:05:19,280 --> 00:05:24,800
Okay. This actually looks like a much nicer short description of, uh

99
00:05:24,800 --> 00:05:28,480
the product introducing a mid-century inspired office chair, and so on

100
00:05:28,480 --> 00:05:29,920
5-wheel base, yeah

101
00:05:29,920 --> 00:05:31,560
both stylish and practical

102
00:05:31,560 --> 00:05:37,440
Not bad. Um, and let me double-check the length that this is

103
00:05:37,440 --> 00:05:39,720
So I'm going to take the response, split it

104
00:05:39,720 --> 00:05:41,040
according to where the space is

105
00:05:41,040 --> 00:05:42,760
and then, you know, print out the length

106
00:05:42,760 --> 00:05:43,920
So it's 52 words

107
00:05:43,920 --> 00:05:45,000
It's actually not bad

108
00:05:45,000 --> 00:05:48,600
Um, large language models are okay

109
00:05:48,600 --> 00:05:53,360
but not that great at following instructions about a very precise word count

110
00:05:53,360 --> 00:05:54,480
But this is actually not bad

111
00:05:54,480 --> 00:05:58,960
Sometimes it will print out something with 60 or 65 and so on words

112
00:05:58,960 --> 00:06:01,360
but it's kind of within reason

113
00:06:01,360 --> 00:06:04,080
Some of the things you could try to do would be

114
00:06:04,080 --> 00:06:09,480
um, to say, use at most three sentences

115
00:06:13,160 --> 00:06:16,440
Let me run that again

116
00:06:16,440 --> 00:06:18,520
But these are different ways to tell

117
00:06:18,520 --> 00:06:21,880
the large language model what's the length of the output that you want

118
00:06:21,880 --> 00:06:25,120
So this is 1, 2, 3

119
00:06:25,120 --> 00:06:26,200
I count three sentences

120
00:06:26,200 --> 00:06:28,200
It looks like I did a pretty good job

121
00:06:28,200 --> 00:06:32,280
Um, and then I've also seen people sometimes do things like

122
00:06:32,280 --> 00:06:35,920
uh, I don't know, use at most 280 characters

123
00:06:35,920 --> 00:06:40,040
Large language models, because of the way they interpret text

124
00:06:40,040 --> 00:06:41,680
using something called a tokenizer

125
00:06:41,680 --> 00:06:43,260
which I won't talk about

126
00:06:43,260 --> 00:06:47,760
But, um, they tend to be so-so at counting characters

127
00:06:47,760 --> 00:06:51,480
But let's see, 281 characters

128
00:06:51,480 --> 00:06:52,720
It's actually surprisingly close

129
00:06:52,720 --> 00:06:56,320
Usually a large language model is- doesn't get it quite this close

130
00:06:56,320 --> 00:06:57,520
But these are different ways

131
00:06:57,520 --> 00:07:01,400
They can play with to try to control the length of the output that you get

132
00:07:01,400 --> 00:07:06,560
But let me just switch it back to use at most 50 words

133
00:07:08,120 --> 00:07:11,960
And there's that result that we had just now

134
00:07:11,960 --> 00:07:15,600
As we continue to refine this text for our websites

135
00:07:15,600 --> 00:07:18,400
we might decide that, boy

136
00:07:18,400 --> 00:07:21,900
this website isn't selling direct to consumers

137
00:07:21,900 --> 00:07:25,080
is actually intended to sell furniture to

138
00:07:25,080 --> 00:07:28,720
furniture retailers that would be more interested in

139
00:07:28,720 --> 00:07:32,480
the technical details of the chair and the materials of the chair

140
00:07:32,480 --> 00:07:35,160
In that case, you can take this prompt and say

141
00:07:35,160 --> 00:07:41,880
I want to modify this prompt to get it to be more precise about the technical details

142
00:07:41,880 --> 00:07:46,240
So let me keep on modifying this prompt

143
00:07:46,240 --> 00:07:50,960
And I'm going to say, this description is intended for furniture retailers

144
00:07:50,960 --> 00:07:52,880
so should be technical and focus on materials

145
00:07:52,880 --> 00:07:55,120
products and constructed from

146
00:07:55,120 --> 00:07:57,640
Let's run that

147
00:07:57,640 --> 00:08:00,840
And let's see

148
00:08:00,840 --> 00:08:03,040
Not bad, says, you know

149
00:08:03,040 --> 00:08:08,120
coated aluminum base and pneumatic chair, high quality materials

150
00:08:08,120 --> 00:08:10,080
So by changing the prompt

151
00:08:10,080 --> 00:08:14,280
you can get it to focus more on specific characters

152
00:08:14,280 --> 00:08:17,200
on specific characteristics you wanted to

153
00:08:17,200 --> 00:08:19,840
And when I look at this

154
00:08:19,840 --> 00:08:23,200
I might decide at the end of the description

155
00:08:23,200 --> 00:08:28,360
I also wanted to include the product IDs

156
00:08:28,360 --> 00:08:30,080
So the two offerings of this chair

157
00:08:30,080 --> 00:08:33,320
SWC 110, SWC 100

158
00:08:33,320 --> 00:08:39,280
So maybe I can further improve this prompt

159
00:08:39,280 --> 00:08:41,920
And to get it to give me the product IDs

160
00:08:41,920 --> 00:08:44,760
I can add this instruction at the end of the description

161
00:08:44,760 --> 00:08:48,320
include every seven character product ID in the technical specification

162
00:08:48,320 --> 00:08:53,640
And let's run it and see what happens

163
00:08:53,640 --> 00:08:57,880
And so it says, introduce your administration's file office chair

164
00:08:57,880 --> 00:09:02,520
shell colors, talks about plastic coating, aluminum base

165
00:09:02,520 --> 00:09:05,960
practical, some options

166
00:09:05,960 --> 00:09:08,080
talks about the two product IDs

167
00:09:08,080 --> 00:09:10,080
So this looks pretty good

168
00:09:10,080 --> 00:09:14,520
And what you've just seen is a short example of the iterative

169
00:09:14,520 --> 00:09:18,920
prompt development that many developers will go through

170
00:09:18,920 --> 00:09:22,080
And I think a guideline is

171
00:09:22,080 --> 00:09:26,520
in the last video, you saw Isa share a number of best practices

172
00:09:26,520 --> 00:09:30,640
And so what I usually do is keep best practices like that in mind

173
00:09:30,640 --> 00:09:33,080
be clear and specific, and if necessary

174
00:09:33,080 --> 00:09:35,160
give the model time to think

175
00:09:35,160 --> 00:09:39,880
With those in mind, it's worthwhile to often take a first attempt at writing a prompt

176
00:09:39,880 --> 00:09:44,880
see what happens, and then go from there to iteratively refine the prompt to get

177
00:09:44,880 --> 00:09:49,480
closer and closer to the results that you need

178
00:09:49,480 --> 00:09:53,920
And so a lot of the successful prompts that you may see used in various programs

179
00:09:53,920 --> 00:09:58,600
was arrived at at an iterative process like this

180
00:09:58,600 --> 00:10:04,040
Just for fun, let me show you an example of a even more complex prompt that might

181
00:10:04,040 --> 00:10:07,600
give you a sense of what ChatGPT can do

182
00:10:07,600 --> 00:10:11,360
which is I've just added a few extra instructions here

183
00:10:11,360 --> 00:10:14,880
After the description, include a table that gives the product dimensions

184
00:10:14,880 --> 00:10:17,160
and then, you know, format everything as HTML

185
00:10:17,160 --> 00:10:20,880
So let's run that

186
00:10:20,880 --> 00:10:24,560
And in practice, you would end up with a prompt like this

187
00:10:24,560 --> 00:10:26,720
really only after multiple iterations

188
00:10:26,720 --> 00:10:31,360
I don't think I know anyone that would write this exact prompt the first time

189
00:10:31,360 --> 00:10:35,560
they were trying to get the system to process a fact sheet

190
00:10:35,560 --> 00:10:40,160
And so this actually outputs a bunch of HTML

191
00:10:40,160 --> 00:10:47,080
Let's display the HTML to see if this is even valid HTML and see if this works

192
00:10:47,080 --> 00:10:49,680
And I don't actually know it's going to work, but let's see

193
00:10:49,680 --> 00:10:50,640
Oh, cool. All right

194
00:10:50,640 --> 00:10:51,920
Looks like it rendered

195
00:10:51,920 --> 00:10:55,960
So it has this really nice looking description of a chair

196
00:10:55,960 --> 00:11:01,560
construction, materials, product dimensions

197
00:11:01,560 --> 00:11:07,240
Oh, it looks like I left out the use at most 50 words instruction

198
00:11:07,240 --> 00:11:09,440
So this is a little bit long, but if you want that, you know

199
00:11:09,440 --> 00:11:11,960
you can even feel free to pause the video

200
00:11:11,960 --> 00:11:17,160
tell it to be more succinct and regenerate this and see what results you get

201
00:11:17,160 --> 00:11:20,200
So I hope you take away from this video that

202
00:11:20,200 --> 00:11:22,720
prompt development is an iterative process

203
00:11:22,720 --> 00:11:27,240
Try something, see how it does not yet fulfill exactly what you want

204
00:11:27,240 --> 00:11:30,320
and then think about how to clarify your instructions

205
00:11:30,320 --> 00:11:33,960
or in some cases, think about how to give it more space to think

206
00:11:33,960 --> 00:11:38,200
to get it closer to delivering the results that you want

207
00:11:38,200 --> 00:11:42,840
And I think the key to being an effective prompt engineer

208
00:11:42,840 --> 00:11:46,480
isn't so much about knowing the perfect prompt

209
00:11:46,480 --> 00:11:49,080
it's about having a good process to develop

210
00:11:49,080 --> 00:11:52,600
prompts that are effective for your application

211
00:11:52,600 --> 00:11:58,320
And in this video, I illustrated developing a prompt using just one example

212
00:11:58,320 --> 00:12:00,960
For more sophisticated applications

213
00:12:00,960 --> 00:12:04,640
sometimes you will have multiple examples

214
00:12:04,640 --> 00:12:09,360
say a list of 10 or even 50 or 100 fact sheets

215
00:12:09,360 --> 00:12:17,280
and iteratively develop a prompt and evaluate it against a large set of cases

216
00:12:17,280 --> 00:12:21,280
But for the early development of most applications

217
00:12:21,280 --> 00:12:26,560
I see many people developing it sort of the way I am with just one example

218
00:12:26,560 --> 00:12:28,520
But then for more mature applications

219
00:12:28,520 --> 00:12:35,120
sometimes it could be useful to evaluate prompts against a larger set of examples

220
00:12:35,120 --> 00:12:40,160
such as to test different prompts on dozens of fact sheets to see

221
00:12:40,160 --> 00:12:44,120
how is average or worst case performances on multiple fact sheets

222
00:12:44,120 --> 00:12:48,800
But usually, you end up doing that only when an application is more mature

223
00:12:48,800 --> 00:12:50,600
and you have to have those metrics to drive

224
00:12:50,600 --> 00:12:54,560
that incremental last few steps of prompt improvement

225
00:12:54,560 --> 00:12:57,520
So with that, please do play with

226
00:12:57,520 --> 00:13:00,240
the Jupyter Code notebook examples and try out

227
00:13:00,240 --> 00:13:03,320
different variations and see what results you get

228
00:13:03,320 --> 00:13:06,360
And when you're done, let's go on to the next video

229
00:13:06,360 --> 00:13:10,200
where we'll talk about one very common use of

230
00:13:10,200 --> 00:13:13,280
large language models in software applications

231
00:13:13,280 --> 00:13:15,480
which is to summarize text

232
00:13:15,480 --> 00:13:25,480
So when you're ready, let's go on to the next video